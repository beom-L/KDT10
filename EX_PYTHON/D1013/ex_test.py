# ## ------------------------------------------------------------------------------
# ## [복습 - 클래스와 객체 활용]
# ## - 학생, 의사 클래스 정의
# ## - 객체 연산 가능하도록 구현 => 연산자는 마음대로
# ## ------------------------------------------------------------------------------
# ## 클래스 기능 : 학생 데이터 표현
# ## 클래스 이름 : Student
# ## 속성 / 특징 : height, gender, age
# ## 기능 / 역할 : 학습하기
# ## ------------------------------------------------------------------------------
# class Student:
#     def __init__(self, height, weight, gender, age):
#         self.height = height
#         self.weight = weight
#         self.gender = gender
#         self.age = age

#     def learn(self):
#         print('배우기')

# ## ------------------------------------------------------------------------------
# ## 클래스 기능 : 의사 데이터 표현
# ## 클래스 이름 : Doctor
# ## 속성 / 특징 : height, gender, age
# ## 기능 / 역할 : 치료하기
# ## ------------------------------------------------------------------------------
# class Doctor:
#     def __init__(self, height, weight, gender, age):
#         self.height = height
#         self.weight = weight
#         self.gender = gender
#         self.age = age
    
#     def heal(self):
#         print('치료하기')


# stu1 = Student(height=183, weight=83, gender='남', age=25)
# stu1.learn()

# doc1 = Doctor(height=180, weight=80, gender='남', age=30)
# doc1.heal()

## ##################################################################################
## ------------------------------------------------------------------------------
## [복습 - 클래스와 객체 활용]
## - 학생, 의사 클래스 정의
## - 객체 연산 가능하도록 구현 => 연산자는 마음대로
## ------------------------------------------------------------------------------
## ------------------------------------------------------------------------------
## 강사님 풀이
## ------------------------------------------------------------------------------
## ------------------------------------------------------------------------------
## 클래스 기능 : 학생 데이터 표현
## 클래스 이름 : Student
## 속성 / 특징 : 학교명, 학년, 식별번호, 전공, 성적, 이름
##              공통속성 => 클래스   속성/변수 : 없음
##              각자속성 => 인스턴스 속성/변수 : 모든 속성
## 기능 / 역할 : 공부한다, 시험친다, 학생정보출력
##              인스턴스 메서드 : 인스턴스/객체의 속성 사용 함수

## 연산자 오버로딩 : 덧셈 => 점수 덧셈 후 반환
##                 연산자와 __XXX__(self, other) 맵핑
## ------------------------------------------------------------------------------
class Student:
    # ---------------------------------------------------------------------------
    # - 클래스 속성/변수 : 모든 인스턴스/객체 공유
    # ---------------------------------------------------------------------------


    # ---------------------------------------------------------------------------
    # - 인스턴스/객체별 속성 초기화 메서드 => 생성자 메서드(Constructor)
    # - 클래스이름()함수 호출 시 자동 실행되는 메서드
    # ---------------------------------------------------------------------------
    def __init__(self, school_, grade_, id_, major_, score_, name_):
        ## self       : 메모리 힙에 할당된 메모리 공간 정보 즉, 메모리 주소
        ## self.속성명 : 전달한 데이터 주소 저장
        self.school = school_
        self.grade = grade_
        self.id = id_
        self.major = major_
        self.score = score_
        self.name = name_


    # ---------------------------------------------------------------------------
    # - 인스턴스/객체 전용 메서드
    # ---------------------------------------------------------------------------
    # - 함수기능 : 공부 기능
    # - 함수이름 : study
    # - 매개변수 : self     - 인자 전달 X, 파이썬 처리해주는 매개변수
    #             subject  - 과목명
    # - 반환결과 : 출력으로 없음
    def study(self, subject):
        print(f'{self.name}이(가) {subject}을(를) 공부한다.')


    # - 함수기능 : 시험 기능
    # - 함수이름 : test
    # - 매개변수 : self
    #             subject - 과목명
    # - 반환결과 : 출력으로 없음
    def test(self, subject):
        print(f'{self.name}이(가) {subject} 시험친다.')


    # - 함수기능 : 학생정보출력 기능
    # - 함수이름 : print_info
    # - 매개변수 : self
    # - 반환결과 : 출력으로 없음
    def print_info(self):
        print('-'*20)
        print(f'학생이름 : {self.name}')
        print(f'학    교 : {self.school}')
        print(f'전    공 : {self.major}')
        print(f'학    년 : {self.grade}')
        print('-'*20)

    # ---------------------------------------------------------------------------
    # - 연산자 오버로딩 메서드
    # ---------------------------------------------------------------------------
    # - 함수기능 : 인스턴스의 score 덧셈 후 반환
    # - 함수이름 : __add__
    # - 매개변수 : self    <- 인스턴스
    #             other   <- 인스턴스
    # - 반환경과 : 덧셈 결과값
    # ---------------------------------------------------------------------------
    def __add__(self, other):                        ## class 끼리 더하기를 할 경우. 해당 메서드를 실행해서 더한 값을 반환함. 내가 설정하는거임
        return self.score + other.score


## ------------------------------------------------------------------------------
## 클래스 기능 : 내과 의사 데이터 표현
## 클래스 이름 : Doctor
## 속성 / 특징 : 병원명, 분야, 이름, 경력, 의사면허번호
##              공통속성   => 클래스   속성/변수 : 분야
##              각자속성   => 인스턴스 속성/변수 : 나머지 속성
##              비공개속성 => 의사면허번호
## 기능 / 역할 : 진료한다, 의사정보출력 , 의사면허번호알려주기 <= 모두 해당하지 않는건 빼기
##              비공개 속성 접근 메서드 getter/setter => get_id()  ※ [할지말지 정해야됨]
## ------------------------------------------------------------------------------
class Doctor:
    ## ------------------------------------------------------------------------------
    # - 클래스 속성/변수
    ## ------------------------------------------------------------------------------
    KIND = '내과'

    ## ------------------------------------------------------------------------------
    # - 인스턴스/객체 속성 초기화 메서드
    ## ------------------------------------------------------------------------------
    def __init__(self, hname_, dname_, year_, id_):
        # - 공개용 속성
        self.hname = hname_
        self.dname = dname_
        self.year = year_
        # - 비공개용 속성 : __속성명
        self.__id = id_


    ## ------------------------------------------------------------------------------
    # - 인스턴스/객체 전용 메서드
    ## ------------------------------------------------------------------------------
    # - 함수기능 : 진료한다
    # - 함수이름 : care 
    # - 매개변수 : self - 인자 전달 X, 파이썬에서 처리          
    # - 반환결과 : 출력함으로 없음
    def care(self):
        print(f'{self.name}의사 선생님이 진료한다.')


    # - 함수기능 : 의사정보 출력
    # - 함수이름 : print_info
    # - 매개변수 : self - 인자 전달 X, 파이썬에서 처리          
    # - 반환결과 : 출력함으로 없음
    def print_info(self):
        print('-'*20)
        print(f'이    름 : {self.hname}')
        print(f'분    야 : {self.KIND}')                     ## 질문1. 전역함수인데 왜 self 사용하는지
        print(f'경    력 : {self.year}')
        # print(f'면    허 : {self.__id}')                     
        print('-'*20)

    # - 함수기능 : 의사 면허번호 반환
    # - 함수이름 : get_id
    # - 매개변수 : self - 인자 전달 X, 파이썬에서 처리          
    # - 반환결과 : 의사면허번호
    def get_id(self):
        return self.__id