## ---------------------------------------------------------------
## 메서드 바인딩 ( Binding )
## -> 메서드 호출 시 인터프리터가 전달 데이터 결정 및 전달
## -> 인스턴스  메서드 : self               데코레이터 X
## -> 클래스    메서드 : cls                @classmethod
## -> 일반/순수 메서드 : X                  @staticmethod
## => 데코레이터를 사용해야함 !
## ---------------------------------------------------------------
## 개념 이해용 클래스
## ---------------------------------------------------------------
class C:
    def inst(self):                     # 일반 인스턴스 메서드 : self 전달
        return "self OK"
    
    @staticmethod
    def sm(x):                          # 정적 메서드 : 바인딩 없음
        return f"x={x}"
    
    @classmethod
    def cm(cls):                        # 클래스 메서드 : cls 전달
        return f'cls={cls.__name__}'


## ---------------------------------------------------------------
## 종류별 메서드 호출
## ---------------------------------------------------------------
## => 인스턴스 메서드 호출
## => 인스턴스이름.인스턴스메서드()
c1 = C()
print(c1.inst())        # OK, self 자동 바인딩
# print(c1.inst())        # 불가

## => 정적 메서드 호출 ---------------------------------------------
## => 클래스이름.정적메서드(), 인스턴스이름.정적메서드()
print(C.sm(10))         # x=10
print(c1.sm(10))        # x=10 (여전히 self 안 넘어옴!)

## => 클래스 메서드 호출 --------------------------------------------
## => 클래스이름.클래스메서드(), 인스턴스이름.클래스메서드()
print(C.cm())           # cls = C
print(c1.cm())          # cls = C (인스턴스로 불러도 cls 주입)